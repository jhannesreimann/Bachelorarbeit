import java.awt.event.ActionEvent;
import java.io.Serial;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

/**
 * Provides a graphical login interface supporting regular and guest authentication.
 *
 * <p>This frame presents fields for username and password, as well as buttons to:
 * - Log in with existing credentials using a {@link LoginStrategy}.
 * - Register a new account via {@link Registrierung}.
 * - Continue as a guest with minimal username requirements.
 *
 * <p>Once authentication succeeds, registered or guest users are reported back
 * through a {@link LoginListener} callback.
 *
 * @author Your Name
 * @version 1.0
 * @see JFrame
 * @see LoginStrategy
 * @see LoginListener
 */
public class Login extends JFrame {
  /**
   * Serial version UID for compatibility across serialization.
   */
  @Serial
  private static final long serialVersionUID = 1L;

  /**
   * Minimum number of characters required for guest usernames.
   *
   * <p>Enforced in {@link #handleConfirmUsername(JFrame, JTextField)} to prevent
   * trivially short guest identifiers.
   */
  private static final int MIN_USERNAME_LENGTH = 5;

  /**
   * Input field for the user's login name.
   *
   * <p>Validated for non-empty content before attempting regular authentication.
   */
  private JTextField nameField;

  /**
   * Input field for the user's password.
   *
   * <p>Hidden characters by default; must be non-empty before login.
   */
  private JPasswordField passwordField;

  /**
   * Listener to notify when a user successfully logs in.
   *
   * <p>Set via {@link #addLoginListener(LoginListener)}.
   */
  private LoginListener loginListener;

  /**
   * Strategy used to perform authentication logic.
   *
   * <p>Can be a {@link RegularLoginStrategy} or {@link GuestLoginStrategy},
   * set before each login attempt.
   */
  private LoginStrategy loginStrategy;

  /**
   * Registers a callback to be invoked upon successful login.
   *
   * @param listener the {@link LoginListener} that handles post-login actions;
   *                 must not be null
   */
  public void addLoginListener(final LoginListener listener) {
    this.loginListener = listener;
  }

  /**
   * Specifies which login algorithm to use for subsequent authentication attempts.
   *
   * @param strategy the {@link LoginStrategy} implementation; must not be null
   */
  public void setLoginStrategy(final LoginStrategy strategy) {
    this.loginStrategy = strategy;
  }

  /**
   * Constructs and displays the main login window.
   *
   * <p>This method sets up the frame size, layout, and adds buttons for:
   * regular login, new user registration, and guest access.
   *
   * <p>Must be called on the Event Dispatch Thread to ensure thread safety.
   */
  public void loginMenu() {
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    setBounds(100, 100, 450, 300);
    final JPanel contentPane = new JPanel();
    contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

    setContentPane(contentPane);
    contentPane.setLayout(null);

    final JButton loginBtn = createLoginButton();
    contentPane.add(loginBtn);

    final JButton registerBtn = createRegisterButton();
    contentPane.add(registerBtn);

    nameField = new JTextField();
    nameField.setBounds(161, 54, 204, 26);
    contentPane.add(nameField);
    nameField.setColumns(10);

    final JLabel userLabel = new JLabel("User name");
    userLabel.setBounds(55, 59, 71, 16);
    contentPane.add(userLabel);

    final JLabel passwordLabel = new JLabel("Password");
    passwordLabel.setBounds(55, 97, 61, 16);
    contentPane.add(passwordLabel);

    final JButton guestLoginButton = createGuestLoginButton();
    contentPane.add(guestLoginButton);

    passwordField = new JPasswordField();
    passwordField.setBounds(161, 92, 204, 26);
    contentPane.add(passwordField);
  }

  /**
   * Creates the "Login" button wired to perform a regular login action.
   *
   * @return a JButton configured to trigger {@link #loginButtonAction(ActionEvent)}
   */
  private JButton createLoginButton() {
    final JButton loginBtn = new JButton("Login");
    loginBtn.addActionListener(this::loginButtonAction);
    loginBtn.setBounds(232, 160, 117, 29);
    return loginBtn;
  }

  /**
   * Handles the click event for the regular login button.
   *
   * <p>Validates that both username and password fields are non-empty.
   * On success, applies {@link RegularLoginStrategy} and attempts authentication.
   *
   * @param e the action event generated by clicking the login button
   */
  private void loginButtonAction(final ActionEvent e) {
    final String enteredUsername = nameField.getText();
    final String enteredPassword = new String(passwordField.getPassword());

    // Check if both username and password are entered
    if (enteredUsername.isEmpty()) {
      showError("Please enter a valid username!");
    } else if (enteredPassword.isEmpty()) {
      showError("Please enter a valid password!");
    } else {
      setLoginStrategy(new RegularLoginStrategy());
      regularLogin(enteredUsername, enteredPassword);
    }
  }

  /**
   * Creates the "Register" button that opens a new registration window.
   *
   * <p>The new {@link Registrierung} frame receives the same listener and
   * strategy references to maintain callback continuity.
   *
   * @return a JButton that opens the registration dialog on click
   */
  private JButton createRegisterButton() {
    final JButton registerBtn = new JButton("Register");
    registerBtn.addActionListener(
        e -> {
          final Registrierung registrationWindow =
              new Registrierung(loginListener, loginStrategy);
          registrationWindow.setVisible(true);
        });
    registerBtn.setBounds(103, 160, 117, 29);
    return registerBtn;
  }

  /**
   * Displays an error message dialog using the Swing {@link JOptionPane}.
   *
   * @param errorMessage the descriptive message to show; should be user-friendly
   */
  private void showError(final String errorMessage) {
    JOptionPane.showMessageDialog(this, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
  }

  /**
   * Attempts to authenticate using regular credentials and notifies the listener on success.
   *
   * <p>Upon successful login, wraps the authenticated data in a {@link RegistrierterNutzer},
   * populates its fields (username, email, password, high score), and triggers
   * {@link LoginListener#onLogin(String, String, Object)}.
   *
   * @param enteredUsername the username provided by the user; non-empty
   * @param enteredPassword the password provided by the user; non-empty
   * @see RegularLoginStrategy
   */
  private void regularLogin(final String enteredUsername, final String enteredPassword) {
    if (loginStrategy instanceof RegularLoginStrategy regularLoginStrategy) {
      final RegistrierterNutzer registeredUser =
          new RegistrierterNutzer(enteredUsername, null, null);

      if (!regularLoginStrategy.login(enteredUsername, enteredPassword)) {
        showError("Please enter the correct password!");
      } else {
        if (loginListener != null) {
          String email = registeredUser.getEmailAddress();
          String password = registeredUser.getPassword();

          registeredUser.setUsername(enteredUsername);
          registeredUser.setHighScore();
          registeredUser.setEmail(email);
          registeredUser.setPassword(password);

          loginListener.onLogin(enteredUsername, enteredPassword, registeredUser);
        }
      }
    }
  }

  /**
   * Creates the "Continue without registration" button for guest access.
   *
   * @return a JButton that initiates the guest login flow on click
   */
  private JButton createGuestLoginButton() {
    final JButton guestLoginButton = new JButton("Continue without registration");
    guestLoginButton.addActionListener(
        e -> {
          setLoginStrategy(new GuestLoginStrategy());
          guestLogin();
        });
    guestLoginButton.setBounds(103, 201, 246, 29);
    return guestLoginButton;
  }

  /**
   * Initiates the guest login by opening a small frame to collect a username only.
   *
   * <p>Guest login does not require a password but enforces a minimum username length.
   */
  private void guestLogin() {
    final JFrame usernameOnlyFrame = createUsernameOnlyWindow();
    usernameOnlyFrame.setVisible(true);
  }

  /**
   * Builds a frame prompting the user to enter only a username for guest access.
   *
   * <p>This frame contains a label, a text field, and a confirm button wired to
   * {@link #handleConfirmUsername(JFrame, JTextField)}.
   *
   * @return a configured {@link JFrame} ready for display
   */
  private JFrame createUsernameOnlyWindow() {
    final JFrame usernameOnlyFrame = new JFrame();
    usernameOnlyFrame.setBounds(100, 100, 300, 150);
    final JPanel usernameOnlyPanel = new JPanel();
    usernameOnlyFrame.getContentPane().add(usernameOnlyPanel);
    usernameOnlyPanel.setLayout(null);

    final JLabel lblNewLabel = new JLabel("Enter User name:");
    lblNewLabel.setBounds(20, 30, 150, 16);
    usernameOnlyPanel.add(lblNewLabel);

    final JTextField usernameOnlyField = new JTextField();
    usernameOnlyField.setBounds(150, 30, 120, 20);
    usernameOnlyPanel.add(usernameOnlyField);

    final JButton confirmUsernameBtn =
        createConfirmUsernameButton(usernameOnlyFrame, usernameOnlyField);
    usernameOnlyPanel.add(confirmUsernameBtn);

    return usernameOnlyFrame;
  }

  /**
   * Creates the confirmation button for the guest username dialog.
   *
   * <p>On click, delegates to {@link #handleConfirmUsername(JFrame, JTextField)}.
   *
   * @param frame the parent frame to close upon successful guest login
   * @param field the text field containing the entered username
   * @return a JButton configured to confirm guest login
   */
  private JButton createConfirmUsernameButton(final JFrame frame, final JTextField field) {
    final JButton confirmUsernameBtn = new JButton("Login");
    confirmUsernameBtn.addActionListener(e -> handleConfirmUsername(frame, field));
    confirmUsernameBtn.setBounds(100, 70, 100, 25);
    return confirmUsernameBtn;
  }

  /**
   * Validates the guest username and, if valid, completes the login process.
   *
   * <p>If the username is shorter than {@value #MIN_USERNAME_LENGTH},
   * an error dialog is shown and the frame remains open. Otherwise, uses
   * {@link GuestLoginStrategy} to perform login, constructs a {@link Nutzer},
   * and notifies the {@link LoginListener}.
   *
   * @param frame the dialog frame collecting the username; disposed on success
   * @param field the text field from which to retrieve the username
   */
  private void handleConfirmUsername(final JFrame frame, final JTextField field) {
    final String enteredUsername = field.getText();
    if (enteredUsername.length() < MIN_USERNAME_LENGTH) {
      showError("Username must be at least " + MIN_USERNAME_LENGTH + " characters long.");
      frame.toFront();
    } else {
      if (loginListener != null && loginStrategy instanceof GuestLoginStrategy guestLoginStrategy) {
        final boolean loginSuccessful = guestLoginStrategy.login(enteredUsername, null);
        if (loginSuccessful) {
          final Nutzer guestUser = new Nutzer(enteredUsername, null, null);
          guestUser.setUsername(enteredUsername);
          guestUser.setHighScore();
          loginListener.onLogin(enteredUsername, null, guestUser);
          frame.dispose();
        }
      }
    }
  }
}